extern crate svd_parser;
extern crate svd2rust;

use std::fs::{self, File};
use std::io::{self, Read, Write};

fn main() {
    codegen().expect("codegen failed");

    println!("cargo:rerun-if-changed=STM32F7x.svd");
}

fn codegen() -> io::Result<()> {
    let xml = &mut String::new();
    File::open("STM32F7x.svd").unwrap().read_to_string(xml).unwrap();
    let device = svd_parser::parse(xml);

    fs::remove_dir_all("src").unwrap();
    fs::create_dir("src").unwrap();

    let mut lib_rs = File::create("src/lib.rs").unwrap();

    // extern crates
    try!(writeln!(lib_rs, "extern crate volatile_register;"));
    try!(writeln!(lib_rs, "#[macro_use] extern crate once;"));
    try!(writeln!(lib_rs, ""));

    let mut modules = Vec::new();

    for peripheral in &device.peripherals {
        let code = svd2rust::gen_peripheral(peripheral, &device.defaults)
            .iter()
            .map(|i| i.to_string())
            .collect::<Vec<_>>()
            .join("\n\n");

        if code.len() > 0 {
            let name = peripheral.name.to_lowercase();
            println!("{}", name);
            modules.push((name.clone(), peripheral.base_address));
            try!(writeln!(lib_rs, "pub mod {};", name));

            let file_name = format!("src/{}.rs", name);
            let mut file = File::create(file_name).unwrap();

            try!(write!(file, "// autogenerated, do not edit\n\n{}", code));
        }
    }

    // hardware struct
    try!(writeln!(lib_rs, ""));
    try!(writeln!(lib_rs, "pub struct Hardware {{"));
    for &(ref module_name, _) in &modules {
        try!(writeln!(lib_rs,
                      "    pub {}: &'static mut {}::RegisterBlock,",
                      module_name,
                      module_name));
    }
    try!(writeln!(lib_rs, "}}"));

    // hw function
    try!(writeln!(lib_rs, ""));
    try!(writeln!(lib_rs, "pub fn hw() -> Hardware {{"));
    try!(writeln!(lib_rs, "    assert_has_not_been_called!();"));
    try!(writeln!(lib_rs, "    Hardware {{"));
    for &(ref module_name, ref base_address) in &modules {
        try!(writeln!(lib_rs,
                      "        {}: unsafe {{ from_addr({:#x}) }},",
                      module_name,
                      base_address));
    }
    try!(writeln!(lib_rs, "    }}"));
    try!(writeln!(lib_rs, "}}"));
    try!(writeln!(lib_rs,
                  "\nunsafe fn from_addr<T>(addr: usize) -> &'static mut T {{"));
    try!(writeln!(lib_rs, "    &mut *(addr as *const T as *mut T)"));
    try!(writeln!(lib_rs, "}}"));

    Ok(())
}
