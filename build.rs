extern crate svd_parser;
extern crate svd2rust;

use std::fs::{self, File};
use std::io::{self, Read, Write};

fn main() {
    codegen().expect("codegen failed");

    println!("cargo:rerun-if-changed=STM32F7x.svd");
}

fn codegen() -> io::Result<()> {
    let xml = &mut String::new();
    File::open("STM32F7x.svd").unwrap().read_to_string(xml).unwrap();
    let device = svd_parser::parse(xml);

    fs::remove_dir_all("src").unwrap();
    fs::create_dir("src").unwrap();

    let mut lib_rs = File::create("src/lib.rs").unwrap();

    // extern crates
    try!(writeln!(lib_rs, "extern crate volatile_register;"));

    for peripheral in &device.peripherals {
        let name = peripheral.name.to_lowercase();
        println!("{}", name);
        try!(writeln!(lib_rs, "pub mod {};", name));

        let file_name = format!("src/{}.rs", name);
        let mut file = File::create(file_name).unwrap();

        try!(write!(file,
                    "// autogenerated, do not edit\n\n{}",
                    svd2rust::gen_peripheral(peripheral, &device.defaults)
                        .iter()
                        .map(|i| i.to_string())
                        .collect::<Vec<_>>()
                        .join("\n\n")));
    }

    Ok(())
}
